import json
import base64
from os.path import exists, abspath
from os import getenv, remove
from dotenv import load_dotenv
import telebot
from fontTools.merge.util import first
from telebot import types
from work_with_stats import StatsManager
from work_with_words import WordFile, Test, Question, DoneTest
from work_with_database import Database
from threading import Thread
from datetime import datetime as dt
from time import sleep
from random import shuffle
from datetime import datetime


class User:
    def __init__(self, id, tag, name, words=[], done_tests=[], hour=9, minute=0, is_finding_rus_word = False, is_finding_eng_word = False, is_setting_time = False, task_check=0, temp_test_data=DoneTest(), is_doing_test=False, temp_questions=None):
        self.id = id
        self.tag = tag
        self.name = name
        self.words = words
        self.done_tests = done_tests
        for i, test in enumerate(self.done_tests):
            self.done_tests[i] = DoneTest(**test)

        self.hour = hour
        self.minute = minute

        self.is_finding_rus_word = is_finding_rus_word
        self.is_finding_eng_word = is_finding_eng_word
        self.is_setting_time = is_setting_time
        self.is_doing_test = is_doing_test

        self.temp_questions = temp_questions

        self.temp_test_data = temp_test_data
        if isinstance(self.temp_test_data, dict):
            self.temp_test_data = DoneTest(**self.temp_test_data)

        self.task_check = task_check


        Thread(target=self.send_day_word, daemon=True).start()

    def send_day_word(self):
        while True:
            current_time = dt.now()
            current_hour = int(current_time.hour)
            current_minute = int(current_time.minute)
            # print(current_hour)
            # print(current_minute)
            # print(user.hour)
            # print(user.minute)
            if self.hour <= current_hour and self.minute <= current_minute:
                if self.done_tests and len(self.done_tests) % 7 == 0:
                    show_stat(self)
                elif self.task_check >= 7:
                    start_test(self)
                else:
                    get_word(self, daily=True)
                    sleep(86390)  # –∂–¥—ë–º –¥–µ–Ω—å
            else:
                # formula = abs((user.hour - current_hour)*3600) + abs((user.minute - current_minute)*60)
                # print(formula)
                # print("–∂–¥—ë–º")
                sleep(10)

load_dotenv(abspath("token.env"))
TOKEN = getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)
db = Database("database.json")
file_worker = WordFile("WORDS.txt")

def get_word(user: User, daily=False):
    eng_word, rus_word = file_worker.get_random_word()
    if [eng_word, rus_word] in user.words:
        get_word(user, daily)
        return
    user.words.append([eng_word, rus_word])
    user.task_check += 1
    db.add_user(user.id, user.__dict__) # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    if not daily:
        bot.send_message(user.id, f"–¢–≤–æ—ë —Å–ª–æ–≤–æ: {eng_word}\n–ï–≥–æ –ø–µ—Ä–µ–≤–æ–¥: {rus_word}")
    else:
        bot.send_message(user.id, f"–¢–≤–æ—ë –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–ª–æ–≤–æ: {eng_word}\n–ï–≥–æ –ø–µ—Ä–µ–≤–æ–¥: {rus_word}")

def show_stat(user: User):
    stat_manager = StatsManager(user.id, user.done_tests)
    data = stat_manager.create_and_save_plot()
    if not data:
        bot.send_message(user.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        main_buttons(user.id)
        return
    path, marks = data

    text = ("–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º —Ç–µ—Å—Ç–∞–º!\n"
            f"–¢–µ—Å—Ç–æ–≤ –Ω–∞ 5: {marks[5]}\n"
            f"–¢–µ—Å—Ç–æ–≤ –Ω–∞ 4: {marks[4]}\n"
            f"–¢–µ—Å—Ç–æ–≤ –Ω–∞ 3: {marks[3]}\n"
            f"–¢–µ—Å—Ç–æ–≤ –Ω–∞ 2: {marks[2]}")

    bot.send_photo(user.id, photo=open(path, 'rb'), caption=text)

    remove(path)

@bot.message_handler(commands=["start", "help"])
def start(message):
    bot.send_message(message.chat.id, text=f"–ü—Ä–∏–≤–µ—Ç {message.chat.first_name} üëã\n–Ø –±–æ—Ç, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–º—É —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ"
                               f" —è–∑—ã–∫–∞ —Å—Ç–∞–Ω—É—Ç –≤ 100 —Ä–∞–∑ –ª—É—á—à–µ üòâ\n–ü–æ—Å–º–æ—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é, –∏–ª–∏ —Å–ª–µ–¥—É–π –∫–Ω–æ–ø–∫–∞–º –¥–ª—è —Ç–æ–≥–æ, "
                               f"—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–∞—á–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ üí™")
    main_buttons(message.chat.id)

def main_buttons(id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    check_stat_btn = types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    start_task_btn = types.KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")
    get_word_btn = types.KeyboardButton(text="–ò–∑—É—á–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ")
    set_time_btn = types.KeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è")
    find_eng_word_btn = types.KeyboardButton(text="–ù–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ")
    find_rus_word_btn = types.KeyboardButton(text="–ù–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ")
    keyboard.add(get_word_btn, set_time_btn, start_task_btn, find_eng_word_btn, find_rus_word_btn, check_stat_btn)
    bot.send_message(id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:", reply_markup=keyboard)

@bot.message_handler(content_types=["text"])
def get_messages(message):
    user = get_user(message.chat.id, message.chat.username, message.chat.first_name)
    if user.is_doing_test:
        bot.send_message(user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ç–µ—Å—Ç!")
        return
    match message.text:
        case "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É":
            show_stat(user)
        case "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç":
            if user.task_check >= 7:
                start_test(user)
            else:
                bot.send_message(user.id, text="–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –≤ –∑–∞–ø–∞—Å–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏—Ö –ø–æ–≤—Ç–æ—Ä–∏—Ç—å :(\n–î–∞–≤–∞–π —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º!")
                get_word(user)
        case "–ò–∑—É—á–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ":
            get_word(user)
        case "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ä–µ–º—è":
            user.is_setting_time = True
            bot.send_message(user.id, text='–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"')
        case "–ù–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ":
            user.is_finding_rus_word = True
            bot.send_message(user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ:")
        case "–ù–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ":
            user.is_finding_eng_word = True
            bot.send_message(user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:")
        case _:
            if user.is_finding_eng_word:
                user.is_finding_eng_word = False
                find_eng_word(user, message.text)
            elif user.is_finding_rus_word:
                user.is_finding_rus_word = False
                find_rus_word(user, message.text)
            elif user.is_setting_time:
                try:
                    hour, minute = tuple(map(int, message.text.split(':')))
                    user.is_setting_time = True
                    set_time(user, hour, minute)
                    bot.send_message(user.id, text="–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
                except:
                    bot.send_message(user.id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")
            else:
                bot.send_message(user.id, "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")
                main_buttons(user.id)

def get_user(id, username, first_name):
    user = find_active_user(id)

    if not user: user = db.get_user(id)
    else: return user
    if not user:
        user = User(id, username, first_name)
        users.append(user)
        db.add_user(id, user.__dict__)
        return user
    else:
        user = User(**user)
        users.append(user)
        return user

def find_active_user(id: int):
    for user in users:
        if user.id == id: return user
    return False

users = db.get_all_data()
users = [User(**users[key]) for key in users]

def set_time(user: User, hour: int, minute: int):
    user.hour = hour
    user.minute = minute
    user.is_setting_time = False
    db.add_user(user.id, user.__dict__)

def find_rus_word(user: User, word: str):
    rus_word = file_worker.get_word(word_in_english=word)
    if rus_word:
        bot.send_message(user.id, f"–í–∞—à –ø–µ—Ä–µ–≤–æ–¥: {rus_word}")
    else:
        bot.send_message(user.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏!")

def find_eng_word(user: User, word: str):
    eng_word = file_worker.get_word(word_in_russian=word)
    if eng_word:
        bot.send_message(user.id, f"–í–∞—à –ø–µ—Ä–µ–≤–æ–¥: {eng_word}")
    else:
        bot.send_message(user.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏!")

def start_test(user: User):
    user.task_check = 0
    user.is_doing_test = True
    db.add_user(user.id, user.__dict__)
    test = Test(user.id, user.words, len(user.done_tests))
    questions = test.create_test()
    questions = list(set(questions))
    user.temp_test_data = DoneTest(user.id, len(questions))
    # user.temp_test_data[0] = len(questions)
    user.temp_questions = questions

    keyboard = types.InlineKeyboardMarkup()
    # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    # types.InlineKeyboardButton(text=incorrect_answer, callback_data=incorrect_answer.split()[0]) for incorrect_answer in questions[0].incorrect_answers

    buttons = []
    for incorrect_answer in questions[0].incorrect_answers:
        if len(incorrect_answer) < 21:
            buttons.append(types.InlineKeyboardButton(text=incorrect_answer, callback_data=incorrect_answer.split()[0]))
        else:
            buttons.append(types.InlineKeyboardButton(text=f"{incorrect_answer[:18]}...",
                                                      callback_data=incorrect_answer.split()[0]))
    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    if len(user.temp_questions[0].correct_answer) >= 21: user.temp_questions[
        0].correct_answer = f"{user.temp_questions[0].correct_answer[:18]}..."
    buttons.append(types.InlineKeyboardButton(text=user.temp_questions[0].correct_answer,
                                              callback_data=user.temp_questions[0].correct_answer))

    shuffle(buttons) # –¥–µ–ª–∞–µ–º —ç—Ç–æ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –≤—ã—Å–≤–µ—á–∏–≤–∞–ª–∏—Å—å –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –∞ –Ω–µ —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    # –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
    keyboard.add(*buttons)

    bot.send_message(user.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {questions[0].word_question}", reply_markup=keyboard)

    # # –º—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞—ë–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    # callback_data = ""
    # for question in questions:
    #     callback_data += f"{question.word_question.strip()}:{question.correct_answer.strip()}"
    #     for incorrect_answer in question.incorrect_answers:
    #         callback_data += f":{incorrect_answer.strip()}"
    #     callback_data += "/"
    # first_callback_data = callback_data.split('/')[0].split(':')
    # print("–ø–µ—Ä–≤—ã–π –∫–æ–ª–ª–±—ç–∫", first_callback_data)

    # # –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤ base64
    # encoded_callback = encode_json(get_json_from_callback(callback_data))
    #
    # keyboard = types.InlineKeyboardMarkup()
    # # types.InlineKeyboardButton(text=answer, callback_data=f"{answer}*{callback_data}") for answer in first_callback_data[2:]
    # buttons = []
    # for incorrect_answer in first_callback_data[2:]:
    #     print(incorrect_answer.strip())
    #     callback = encode_json(get_json_from_callback(f"{incorrect_answer}*{callback_data}"))
    #     buttons.append(types.InlineKeyboardButton(text=incorrect_answer, callback_data=callback))
    #
    # callback = encode_json(get_json_from_callback(f"{first_callback_data[1]}*{callback_data}"))
    # buttons.append(types.InlineKeyboardButton(text=first_callback_data[1], callback_data=callback))
    # shuffle(buttons)
    # keyboard.add(*buttons)

@bot.callback_query_handler(func=lambda call: True)
def check_answer(call: types.CallbackQuery):
    # –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    user = get_user(call.message.chat.id, call.message.chat.username, call.message.chat.first_name)

    if not user.temp_questions: return

    if call.data == user.temp_questions[0].correct_answer:
        bot.answer_callback_query(call.id, text="–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        user.temp_test_data.answers_len += 1
    else:
        bot.answer_callback_query(call.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

    if len(user.temp_questions) == 1:
        user_score = (100 * user.temp_test_data.answers_len) / user.temp_test_data.questions_len
        if user_score <= 35: user_score = 2
        elif user_score <= 50: user_score = 3
        elif user_score <= 75: user_score = 4
        elif user_score <= 100: user_score = 5
        user.temp_test_data.mark = user_score
        date = datetime.now()
        user.temp_test_data.day = date.day
        user.temp_test_data.month = date.month

        user.done_tests.append(user.temp_test_data)
        bot.send_message(user.id, f"–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω! –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –±—ã–ª–æ - {user.temp_test_data.questions_len}\n"
                                  f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ - {user.temp_test_data.answers_len}\n"
                                  f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ - {user.temp_test_data.mark}!")
        user.temp_test_data = DoneTest(user.id)
        user.is_doing_test = False
        user.temp_questions = None
        db.add_user(user.id, user.__dict__)
        main_buttons(user.id)
        return

    user.temp_questions = user.temp_questions[1:] # –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª–∏, —É–±–∏—Ä–∞–µ–º –µ–≥–æ

    keyboard = types.InlineKeyboardMarkup()
    # —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    # buttons = [types.InlineKeyboardButton(text=incorrect_answer, callback_data=incorrect_answer.split()[0]) for incorrect_answer in
    #            user.temp_questions[0].incorrect_answers if len(incorrect_answer) < 21 else types.InlineKeyboardButton(text=f"{incorrect_answer[18]}...", callback_data=incorrect_answer.split()[0])]
    buttons = []
    for incorrect_answer in user.temp_questions[0].incorrect_answers:
        if len(incorrect_answer) < 21:
            buttons.append(types.InlineKeyboardButton(text=incorrect_answer, callback_data=incorrect_answer.split()[0]))
        else:
            buttons.append(types.InlineKeyboardButton(text=f"{incorrect_answer[:18]}...", callback_data=incorrect_answer.split()[0]))
    if len(user.temp_questions[0].correct_answer) >= 21: user.temp_questions[0].correct_answer = f"{user.temp_questions[0].correct_answer[:18]}..."
    buttons.append(types.InlineKeyboardButton(text=user.temp_questions[0].correct_answer, callback_data=user.temp_questions[0].correct_answer))
    shuffle(buttons)  
    keyboard.add(*buttons)  # –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    bot.edit_message_text(text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {user.temp_questions[0].word_question}", chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=keyboard)

    # callback = decode_json(call.data)
    #
    # # answer_by_user = call.data.split('*')[0]
    # # questions = call.data.split('*')[1].split('/')
    # # question = questions[0].split(':')
    # # correct_answer = question[1]
    #
    # answer_by_user = callback[0].split('*')[0]
    # question = callback[0].split('*')[1].split(':')
    # correct_answer = question[1]
    #
    # if answer_by_user == correct_answer:
    #     bot.answer_callback_query(call.id, text="–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    #     user.temp_test_data[1] += 1
    # else:
    #     bot.answer_callback_query(call.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    #
    # # –ú—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç–µ—Å—Ç. –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
    # if len(callback) == 1:
    #     user.temp_test_data[2] = user.temp_test_data[1]//user.temp_test_data[0]
    #     user.done_tests.append(user.temp_test_data)
    #     bot.send_message(user.id, f"–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω! –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –±—ã–ª–æ - {user.temp_test_data[0]}\n"
    #                               f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ - {user.temp_test_data[1]}\n"
    #                               f"–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ - {user.temp_test_data[2]}!")
    #     user.temp_test_data = [0, 0, 0]
    #     user.is_doing_test = False
    #     db.add_user(user.id, user.__dict__)
    #     main_buttons(user.id)
    #     return
    #
    # callback_data = "/".join(questions[1:]) # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ –Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–∞–ª –æ—Ç–≤–µ—Ç
    # next_question = questions[1].split(':')
    # nq_word = next_question[0]
    # nq_answer = next_question[1]
    # nq_incorrect_answers = next_question[2:]
    # keyboard = types.InlineKeyboardMarkup()
    # buttons = [types.InlineKeyboardButton(text=answer, callback_data=f"/{answer}*{callback_data}") for answer in
    #            nq_incorrect_answers[2:]]
    # buttons.append(types.InlineKeyboardButton(text=nq_answer,
    #                                           callback_data=nq_answer))
    # shuffle(buttons)
    # keyboard.add(*buttons)
    # bot.edit_message_text(text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: {nq_word}", chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=keyboard)
    # # bot.edit_message_reply_markup(call.message.chat.id, message_id=call.message.id, reply_markup=keyboard)

bot.infinity_polling()